--[[
  AnimeRangersX Script Loader
  Được mã hóa bởi: Dương Tuấn và ghjiukliop
  
  Người chơi được phép sử dụng script này cho mục đích cá nhân
  Nghiêm cấm chia sẻ, bán lại hoặc chỉnh sửa mà không được phép!
]]

local HT_Hub = {}
HT_Hub.Version = "1.0"
HT_Hub.LastUpdate = "2023"

-- Functions
local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
local function dec(data)
    data = string.gsub(data, '[^'..b..'=]', '')
    return (data:gsub('.', function(x)
        if (x == '=') then return '' end
        local r,f='',(b:find(x)-1)
        for i=6,1,-1 do r=r..(f%2^i-f%2^(i-1)>0 and '1' or '0') end
        return r;
    end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
        if (#x ~= 8) then return '' end
        local c=0
        for i=1,8 do c=c+(x:sub(i,i)=='1' and 2^(8-i) or 0) end
        return string.char(c)
    end))
end

-- Anti-Debug Protection
local env = getfenv()
local old_info = debug.info
debug.info = function(...)
    local info = old_info(...)
    if info and info:find("AnimeRangersX") then
        return "function: 0x" .. string.format("%x", math.random(1000000, 9999999))
    end
    return info
end

-- Extra Security
local function securityCheck()
    local plr = game:GetService("Players").LocalPlayer
    if not plr then return true end
    
    local banned = {
        -- Thêm HWID hoặc UserID của người dùng bị cấm vào đây
    }
    
    for _, id in ipairs(banned) do
        if tostring(plr.UserId) == tostring(id) then
            return false
        end
    end
    
    return true
end

-- Check Executor
local supported = {
    "Krnl",
    "Fluxus", 
    "Codex", 
    "Delta", 
    "Synapse", 
    "ScriptWare",
    "Electron"
}

local function isExecutorSupported()
    local execIdentify = identifyexecutor or getexecutorname
    if not execIdentify then return true end
    
    local executor = execIdentify()
    if not executor then return true end
    
    for _, name in ipairs(supported) do
        if executor:lower():find(name:lower()) then
            return true
        end
    end
    
    return false
end

-- Mã hóa script (dán mã đã mã hóa ở đây)
local encryptedScript = [[

]]

-- Main execution
if not securityCheck() then
    warn("Bạn không có quyền sử dụng script này!")
    return
end

if not isExecutorSupported() then
    warn("Executor này có thể không được hỗ trợ đầy đủ.")
    wait(1)
end

-- Thực thi script
local success, err = pcall(function()
    loadstring(dec(encryptedScript))()
end)

if not success then
    warn("Lỗi khi chạy script: " .. tostring(err))
end
